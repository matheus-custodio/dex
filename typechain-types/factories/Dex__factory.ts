/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Dex, DexInterface } from "../Dex";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "enum Dex.Type",
        name: "orderType",
        type: "uint8",
      },
    ],
    name: "GetOrderBook",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "enum Dex.Type",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "ticker",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Dex.Order[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x908a12f6",
        type: "bytes32",
      },
    ],
    name: "c_0x908a12f6",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xd01e15ec",
        type: "bytes32",
      },
    ],
    name: "c_0xd01e15ec",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "createLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "orderBook",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "enum Dex.Type",
        name: "orderType",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenList",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tokenMapping",
    outputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611db28061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639776aacf1161008c578063a8d2021a11610066578063a8d2021a1461023b578063c9630cb014610257578063cd7b9df514610273578063f2fde38b146102a3576100ea565b80639776aacf146101e55780639ead722214610201578063a87f014614610231576100ea565b806321165b26116100c857806321165b2614610170578063667cb4ba1461018c578063715018a6146101bd5780638da5cb5b146101c7576100ea565b80630bb431b6146100ef5780630f00e1bb146101245780631f14df6914610140575b600080fd5b61010960048036038101906101049190611603565b6102bf565b60405161011b96959493929190611a28565b60405180910390f35b61013e60048036038101906101399190611562565b610352565b005b61015a600480360381019061015591906114fd565b610355565b6040516101679190611a0d565b60405180910390f35b61018a60048036038101906101859190611562565b61037a565b005b6101a660048036038101906101a19190611562565b61037d565b6040516101b4929190611964565b60405180910390f35b6101c56103c1565b005b6101cf610449565b6040516101dc91906118ac565b60405180910390f35b6101ff60048036038101906101fa919061158b565b610472565b005b61021b60048036038101906102169190611652565b610689565b6040516102289190611949565b60405180910390f35b6102396106ad565b005b6102556004803603810190610250919061167b565b6106db565b005b610271600480360381019061026c919061167b565b610c29565b005b61028d600480360381019061028891906115c7565b611036565b60405161029a9190611927565b60405180910390f35b6102bd60048036038101906102b891906114d4565b61127b565b005b600460205282600052604060002060205281600052604060002081815481106102e757600080fd5b906000526020600020906005020160009250925050508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154908060040154905086565b50565b6003602052816000526040600020602052806000526040600020600091509150505481565b50565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6103c9611373565b73ffffffffffffffffffffffffffffffffffffffff166103e7610449565b73ffffffffffffffffffffffffffffffffffffffff161461043d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610434906119cd565b60405180910390fd5b610447600061137b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61047a611373565b73ffffffffffffffffffffffffffffffffffffffff16610498610449565b73ffffffffffffffffffffffffffffffffffffffff16146104ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e5906119cd565b60405180910390fd5b61051a7fc79ce42af14b4065aad4442d78f38d34c1d39e70a98ccf2357c5271cf9c5907460001b61037a565b6105467fa082e56bb636b6f4d296a9578aecd384958f561c0d353aa4b3376cf69781a29060001b61037a565b6105727fc19aa6d0d5377b89fce766a21b1614765e6cb177d46902bb7566706ab75858b360001b61037a565b60405180604001604052808381526020018273ffffffffffffffffffffffffffffffffffffffff16815250600160008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506106307f110cddc2cbe31a285c9596fafd417b38ef1300bce754534fc4d3eb848da45ecb60001b61037a565b61065c7f2343c85451e5901306a3549cbd33baa83379688fedccfdda64f8f54f418176b960001b61037a565b60028290806001815401808255809150506001900390600052602060002001600090919091909150555050565b6002818154811061069957600080fd5b906000526020600020016000915090505481565b6106d97f0d286bc598008bfd2dc7e3bb93bc963938658aa71a232f5861ee0f65a8b6b74060001b610352565b565b806107087f282b75e07678d4282c6ae429f1e5861406d505b0dbccbd15e36bc58f65d9ba6760001b61037a565b6107347f1b3f0265a9f9b6efab5f90bd6a33ed049255f75f155c52d8ba2b8d3781f229d760001b61037a565b6107607f9120983b1be4dcd6844e035d0e8b0339398252dac0ba04f67393992c1f722b8160001b61037a565b61078c7fd7a1a8dc51237a5ece01926a9eaa2496c14dd5918a89674c52e0cbc72a6f4f0e60001b61037a565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610832576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610829906119ad565b60405180910390fd5b61085e7ff00d5a459c2c6a6e305e2d5b6c50433afa090e81c7c7e22dff1d0598d7aa17f060001b61037a565b61088a7f2fbc7f4e4a195f4f1e13efa25db1894774f36653f095b09d434176b5174135c560001b61037a565b6108b67f7c6d602793ba07ff7b369782e057e0e73f3c2b572040bc5e7bce94cfe9b3b09460001b61037a565b6108e27faeeb49c1f5296a5ccdeb036a4d3459434599862d41f3046b93faff0f0784e79160001b61037a565b61090e7fbf65c8573b2071145e70b5f58c9005db9c8d66bcedb24108044c80ea303a5a9560001b61037a565b61093a7f2a949e94ac45180deb42597b6a7d19a286ae7ae467b91d981f587f1f8b210b6660001b61037a565b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205410156109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c4906119ed565b60405180910390fd5b6109f97fea07032a89ab14753a2d084184c9bd3a619ae9b903a3ab2d0a4e639fc06bb47260001b61037a565b610a257fbdedbd9c249b64cc0f3b5b3861d6f1d60daded61c30f75b17329993c1160962b60001b61037a565b610a517fc2ea7500fe6fa75092e817795eadc5d29812abdbf348ae2ecfe1de318df22f0960001b61037a565b610ab483600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205461143f90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550610b347f3efbeab8dbae39ff71f6cc7a0b283c2f8c6f1f188712c6cadf47ea6cccaeac3860001b61037a565b610b607f86d11e4855cd1f45aca8de4b317a91d96d0b324b4112d32e72801ecacd06b2ee60001b61037a565b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610bd19291906118fe565b602060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190611539565b50505050565b80610c567f282b75e07678d4282c6ae429f1e5861406d505b0dbccbd15e36bc58f65d9ba6760001b61037a565b610c827f1b3f0265a9f9b6efab5f90bd6a33ed049255f75f155c52d8ba2b8d3781f229d760001b61037a565b610cae7f9120983b1be4dcd6844e035d0e8b0339398252dac0ba04f67393992c1f722b8160001b61037a565b610cda7fd7a1a8dc51237a5ece01926a9eaa2496c14dd5918a89674c52e0cbc72a6f4f0e60001b61037a565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d77906119ad565b60405180910390fd5b610dac7ff00d5a459c2c6a6e305e2d5b6c50433afa090e81c7c7e22dff1d0598d7aa17f060001b61037a565b610dd87f2fbc7f4e4a195f4f1e13efa25db1894774f36653f095b09d434176b5174135c560001b61037a565b610e047f6e3f4985389db89d6b832a92887e0deba822de24f6bdfbde4e6b7a2d3bb9ec9960001b61037a565b610e307f22cb1562166ff7beeb2234c9334bfdc1cd9c3c0b31c03b6a7ef921fae19a531660001b61037a565b610e5c7f5bfe026ea0002197134550ededc8ea78d55139486f4fcbcd503c9ac9b658c0ad60001b61037a565b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610ecf939291906118c7565b602060405180830381600087803b158015610ee957600080fd5b505af1158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f219190611539565b50610f4e7f5bb40ad93dea87f6eae2fe0abd636143142bc749f87f7bc2f75013510cc846a160001b61037a565b610f7a7f1eac64de831cd21e51812e313908a7d63812850eb923dcdba122c8c74cedb8c360001b61037a565b610fdd83600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205461145590919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050565b60606110647f57eb1b03d09e2c287afcb6019547b609884a80fee49c7567a14be993473deb0e60001b610352565b6110907fca7ab9e7b1e35f2d9fa0dd7e1addae412b41d101df0f2bde5ec1b5b7e8e2321860001b610352565b6110bc7fb6e446a2db962f407dc755eb7d9135374eab3be0ba321c6323563ebf2f743cab60001b610352565b60046000848152602001908152602001600020600083600181111561110a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561126f57838290600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff166001811115611206577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181111561123e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201548152505081526020019060010190611138565b50505050905092915050565b611283611373565b73ffffffffffffffffffffffffffffffffffffffff166112a1610449565b73ffffffffffffffffffffffffffffffffffffffff16146112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee906119cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135e9061198d565b60405180910390fd5b6113708161137b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000818361144d9190611b29565b905092915050565b600081836114639190611ad3565b905092915050565b60008135905061147a81611d10565b92915050565b60008151905061148f81611d27565b92915050565b6000813590506114a481611d3e565b92915050565b6000813590506114b981611d55565b92915050565b6000813590506114ce81611d65565b92915050565b6000602082840312156114e657600080fd5b60006114f48482850161146b565b91505092915050565b6000806040838503121561151057600080fd5b600061151e8582860161146b565b925050602061152f85828601611495565b9150509250929050565b60006020828403121561154b57600080fd5b600061155984828501611480565b91505092915050565b60006020828403121561157457600080fd5b600061158284828501611495565b91505092915050565b6000806040838503121561159e57600080fd5b60006115ac85828601611495565b92505060206115bd8582860161146b565b9150509250929050565b600080604083850312156115da57600080fd5b60006115e885828601611495565b92505060206115f9858286016114aa565b9150509250929050565b60008060006060848603121561161857600080fd5b600061162686828701611495565b9350506020611637868287016114bf565b9250506040611648868287016114bf565b9150509250925092565b60006020828403121561166457600080fd5b6000611672848285016114bf565b91505092915050565b6000806040838503121561168e57600080fd5b600061169c858286016114bf565b92505060206116ad85828601611495565b9150509250929050565b60006116c38383611813565b60c08301905092915050565b6116d881611b5d565b82525050565b6116e781611b5d565b82525050565b60006116f882611a99565b6117028185611ab1565b935061170d83611a89565b8060005b8381101561173e57815161172588826116b7565b975061173083611aa4565b925050600181019050611711565b5085935050505092915050565b61175481611b7b565b82525050565b61176381611b7b565b82525050565b61177281611bc2565b82525050565b61178181611bc2565b82525050565b6000611794602683611ac2565b915061179f82611c32565b604082019050919050565b60006117b7600f83611ac2565b91506117c282611c81565b602082019050919050565b60006117da602083611ac2565b91506117e582611caa565b602082019050919050565b60006117fd601683611ac2565b915061180882611cd3565b602082019050919050565b60c082016000820151611829600085018261188e565b50602082015161183c60208501826116cf565b50604082015161184f6040850182611769565b506060820151611862606085018261174b565b506080820151611875608085018261188e565b5060a082015161188860a085018261188e565b50505050565b61189781611bb8565b82525050565b6118a681611bb8565b82525050565b60006020820190506118c160008301846116de565b92915050565b60006060820190506118dc60008301866116de565b6118e960208301856116de565b6118f6604083018461189d565b949350505050565b600060408201905061191360008301856116de565b611920602083018461189d565b9392505050565b6000602082019050818103600083015261194181846116ed565b905092915050565b600060208201905061195e600083018461175a565b92915050565b6000604082019050611979600083018561175a565b61198660208301846116de565b9392505050565b600060208201905081810360008301526119a681611787565b9050919050565b600060208201905081810360008301526119c6816117aa565b9050919050565b600060208201905081810360008301526119e6816117cd565b9050919050565b60006020820190508181036000830152611a06816117f0565b9050919050565b6000602082019050611a22600083018461189d565b92915050565b600060c082019050611a3d600083018961189d565b611a4a60208301886116de565b611a576040830187611778565b611a64606083018661175a565b611a71608083018561189d565b611a7e60a083018461189d565b979650505050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611ade82611bb8565b9150611ae983611bb8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b1e57611b1d611bd4565b5b828201905092915050565b6000611b3482611bb8565b9150611b3f83611bb8565b925082821015611b5257611b51611bd4565b5b828203905092915050565b6000611b6882611b98565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611b9382611cfc565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bcd82611b85565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e206e6f742061646465640000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42616c616e6365206e6f742073756666696369656e7400000000000000000000600082015250565b60028110611d0d57611d0c611c03565b5b50565b611d1981611b5d565b8114611d2457600080fd5b50565b611d3081611b6f565b8114611d3b57600080fd5b50565b611d4781611b7b565b8114611d5257600080fd5b50565b60028110611d6257600080fd5b50565b611d6e81611bb8565b8114611d7957600080fd5b5056fea2646970667358221220f16f6f1c353cae2e7bcdda8730df784a8e035de353d1c0fb6c245fb67713b68664736f6c63430008040033";

type DexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dex__factory extends ContractFactory {
  constructor(...args: DexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Dex> {
    return super.deploy(overrides || {}) as Promise<Dex>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Dex {
    return super.attach(address) as Dex;
  }
  connect(signer: Signer): Dex__factory {
    return super.connect(signer) as Dex__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexInterface {
    return new utils.Interface(_abi) as DexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Dex {
    return new Contract(address, _abi, signerOrProvider) as Dex;
  }
}
