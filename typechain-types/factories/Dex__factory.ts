/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Dex, DexInterface } from "../Dex";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "createLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "enum Dex.Type",
        name: "orderType",
        type: "uint8",
      },
    ],
    name: "getOrderBook",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "enum Dex.Type",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "ticker",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Dex.Order[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "orderBook",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "enum Dex.Type",
        name: "orderType",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenList",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tokenMapping",
    outputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61173a8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639ead7222116100715780639ead722214610193578063a87f0146146101c3578063a8d2021a146101cd578063ba58ea68146101e9578063c9630cb014610219578063f2fde38b14610235576100b4565b80630bb431b6146100b95780631f14df69146100ee578063667cb4ba1461011e578063715018a61461014f5780638da5cb5b146101595780639776aacf14610177575b600080fd5b6100d360048036038101906100ce9190610f8b565b610251565b6040516100e5969594939291906113b0565b60405180910390f35b61010860048036038101906101039190610e85565b6102e4565b6040516101159190611395565b60405180910390f35b61013860048036038101906101339190610eea565b610309565b6040516101469291906112ec565b60405180910390f35b61015761034d565b005b6101616103d5565b60405161016e9190611234565b60405180910390f35b610191600480360381019061018c9190610f13565b6103fe565b005b6101ad60048036038101906101a89190610fda565b610539565b6040516101ba91906112d1565b60405180910390f35b6101cb61055d565b005b6101e760048036038101906101e29190611003565b61055f565b005b61020360048036038101906101fe9190610f4f565b610819565b60405161021091906112af565b60405180910390f35b610233600480360381019061022e9190611003565b6109da565b005b61024f600480360381019061024a9190610e5c565b610c03565b005b6004602052826000526040600020602052816000526040600020818154811061027957600080fd5b906000526020600020906005020160009250925050508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154908060040154905086565b6003602052816000526040600020602052806000526040600020600091509150505481565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b610355610cfb565b73ffffffffffffffffffffffffffffffffffffffff166103736103d5565b73ffffffffffffffffffffffffffffffffffffffff16146103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090611355565b60405180910390fd5b6103d36000610d03565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610406610cfb565b73ffffffffffffffffffffffffffffffffffffffff166104246103d5565b73ffffffffffffffffffffffffffffffffffffffff161461047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190611355565b60405180910390fd5b60405180604001604052808381526020018273ffffffffffffffffffffffffffffffffffffffff16815250600160008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060028290806001815401808255809150506001900390600052602060002001600090919091909150555050565b6002818154811061054957600080fd5b906000526020600020016000915090505481565b565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610606576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fd90611335565b60405180910390fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020541015610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090611375565b60405180910390fd5b6106fc83600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054610dc790919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107c1929190611286565b602060405180830381600087803b1580156107db57600080fd5b505af11580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190610ec1565b50505050565b6060600460008481526020019081526020016000206000836001811115610869577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109ce57838290600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff166001811115610965577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181111561099d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610897565b50505050905092915050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890611335565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610af49392919061124f565b602060405180830381600087803b158015610b0e57600080fd5b505af1158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190610ec1565b50610baa83600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054610ddd90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050565b610c0b610cfb565b73ffffffffffffffffffffffffffffffffffffffff16610c296103d5565b73ffffffffffffffffffffffffffffffffffffffff1614610c7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7690611355565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce690611315565b60405180910390fd5b610cf881610d03565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008183610dd591906114b1565b905092915050565b60008183610deb919061145b565b905092915050565b600081359050610e0281611698565b92915050565b600081519050610e17816116af565b92915050565b600081359050610e2c816116c6565b92915050565b600081359050610e41816116dd565b92915050565b600081359050610e56816116ed565b92915050565b600060208284031215610e6e57600080fd5b6000610e7c84828501610df3565b91505092915050565b60008060408385031215610e9857600080fd5b6000610ea685828601610df3565b9250506020610eb785828601610e1d565b9150509250929050565b600060208284031215610ed357600080fd5b6000610ee184828501610e08565b91505092915050565b600060208284031215610efc57600080fd5b6000610f0a84828501610e1d565b91505092915050565b60008060408385031215610f2657600080fd5b6000610f3485828601610e1d565b9250506020610f4585828601610df3565b9150509250929050565b60008060408385031215610f6257600080fd5b6000610f7085828601610e1d565b9250506020610f8185828601610e32565b9150509250929050565b600080600060608486031215610fa057600080fd5b6000610fae86828701610e1d565b9350506020610fbf86828701610e47565b9250506040610fd086828701610e47565b9150509250925092565b600060208284031215610fec57600080fd5b6000610ffa84828501610e47565b91505092915050565b6000806040838503121561101657600080fd5b600061102485828601610e47565b925050602061103585828601610e1d565b9150509250929050565b600061104b838361119b565b60c08301905092915050565b611060816114e5565b82525050565b61106f816114e5565b82525050565b600061108082611421565b61108a8185611439565b935061109583611411565b8060005b838110156110c65781516110ad888261103f565b97506110b88361142c565b925050600181019050611099565b5085935050505092915050565b6110dc81611503565b82525050565b6110eb81611503565b82525050565b6110fa8161154a565b82525050565b6111098161154a565b82525050565b600061111c60268361144a565b9150611127826115ba565b604082019050919050565b600061113f600f8361144a565b915061114a82611609565b602082019050919050565b600061116260208361144a565b915061116d82611632565b602082019050919050565b600061118560168361144a565b91506111908261165b565b602082019050919050565b60c0820160008201516111b16000850182611216565b5060208201516111c46020850182611057565b5060408201516111d760408501826110f1565b5060608201516111ea60608501826110d3565b5060808201516111fd6080850182611216565b5060a082015161121060a0850182611216565b50505050565b61121f81611540565b82525050565b61122e81611540565b82525050565b60006020820190506112496000830184611066565b92915050565b60006060820190506112646000830186611066565b6112716020830185611066565b61127e6040830184611225565b949350505050565b600060408201905061129b6000830185611066565b6112a86020830184611225565b9392505050565b600060208201905081810360008301526112c98184611075565b905092915050565b60006020820190506112e660008301846110e2565b92915050565b600060408201905061130160008301856110e2565b61130e6020830184611066565b9392505050565b6000602082019050818103600083015261132e8161110f565b9050919050565b6000602082019050818103600083015261134e81611132565b9050919050565b6000602082019050818103600083015261136e81611155565b9050919050565b6000602082019050818103600083015261138e81611178565b9050919050565b60006020820190506113aa6000830184611225565b92915050565b600060c0820190506113c56000830189611225565b6113d26020830188611066565b6113df6040830187611100565b6113ec60608301866110e2565b6113f96080830185611225565b61140660a0830184611225565b979650505050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061146682611540565b915061147183611540565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114a6576114a561155c565b5b828201905092915050565b60006114bc82611540565b91506114c783611540565b9250828210156114da576114d961155c565b5b828203905092915050565b60006114f082611520565b9050919050565b60008115159050919050565b6000819050919050565b600081905061151b82611684565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115558261150d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e206e6f742061646465640000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42616c616e6365206e6f742073756666696369656e7400000000000000000000600082015250565b600281106116955761169461158b565b5b50565b6116a1816114e5565b81146116ac57600080fd5b50565b6116b8816114f7565b81146116c357600080fd5b50565b6116cf81611503565b81146116da57600080fd5b50565b600281106116ea57600080fd5b50565b6116f681611540565b811461170157600080fd5b5056fea2646970667358221220f9d14646eb1a1c045b262d86917ef64b221dcb3f907b53fb7f92b464b084fd7e64736f6c63430008040033";

type DexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dex__factory extends ContractFactory {
  constructor(...args: DexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Dex> {
    return super.deploy(overrides || {}) as Promise<Dex>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Dex {
    return super.attach(address) as Dex;
  }
  connect(signer: Signer): Dex__factory {
    return super.connect(signer) as Dex__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexInterface {
    return new utils.Interface(_abi) as DexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Dex {
    return new Contract(address, _abi, signerOrProvider) as Dex;
  }
}
