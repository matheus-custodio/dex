/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Dex, DexInterface } from "../Dex";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "createLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "enum Dex.Type",
        name: "orderType",
        type: "uint8",
      },
    ],
    name: "getOrderBook",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "enum Dex.Type",
            name: "orderType",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "ticker",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Dex.Order[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenList",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tokenMapping",
    outputs: [
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "ticker",
        type: "bytes32",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115a88061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639ead7222116100715780639ead722214610153578063a87f014614610183578063a8d2021a1461018d578063ba58ea68146101a9578063c9630cb0146101d9578063f2fde38b146101f5576100a9565b80631f14df69146100ae578063667cb4ba146100de578063715018a61461010f5780638da5cb5b146101195780639776aacf14610137575b600080fd5b6100c860048036038101906100c39190610db2565b610211565b6040516100d59190611264565b60405180910390f35b6100f860048036038101906100f39190610e17565b610236565b6040516101069291906111bb565b60405180910390f35b61011761027a565b005b610121610302565b60405161012e9190611103565b60405180910390f35b610151600480360381019061014c9190610e40565b61032b565b005b61016d60048036038101906101689190610eb8565b610466565b60405161017a91906111a0565b60405180910390f35b61018b61048a565b005b6101a760048036038101906101a29190610ee1565b61048c565b005b6101c360048036038101906101be9190610e7c565b610746565b6040516101d0919061117e565b60405180910390f35b6101f360048036038101906101ee9190610ee1565b610907565b005b61020f600480360381019061020a9190610d89565b610b30565b005b6003602052816000526040600020602052806000526040600020600091509150505481565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b610282610c28565b73ffffffffffffffffffffffffffffffffffffffff166102a0610302565b73ffffffffffffffffffffffffffffffffffffffff16146102f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ed90611224565b60405180910390fd5b6103006000610c30565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610333610c28565b73ffffffffffffffffffffffffffffffffffffffff16610351610302565b73ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90611224565b60405180910390fd5b60405180604001604052808381526020018273ffffffffffffffffffffffffffffffffffffffff16815250600160008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060028290806001815401808255809150506001900390600052602060002001600090919091909150555050565b6002818154811061047657600080fd5b906000526020600020016000915090505481565b565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90611204565b60405180910390fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205410156105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90611244565b60405180910390fd5b61062983600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054610cf490919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055506001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016106ee929190611155565b602060405180830381600087803b15801561070857600080fd5b505af115801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610dee565b50505050565b6060600460008481526020019081526020016000206000836001811115610796577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156108fb57838290600052602060002090600502016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff166001811115610892577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156108ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016002820154815260200160038201548152602001600482015481525050815260200190600101906107c4565b50505050905092915050565b80600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a590611204565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a219392919061111e565b602060405180830381600087803b158015610a3b57600080fd5b505af1158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190610dee565b50610ad783600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054610d0a90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550505050565b610b38610c28565b73ffffffffffffffffffffffffffffffffffffffff16610b56610302565b73ffffffffffffffffffffffffffffffffffffffff1614610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390611224565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c13906111e4565b60405180910390fd5b610c2581610c30565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008183610d02919061131f565b905092915050565b60008183610d1891906112c9565b905092915050565b600081359050610d2f81611506565b92915050565b600081519050610d448161151d565b92915050565b600081359050610d5981611534565b92915050565b600081359050610d6e8161154b565b92915050565b600081359050610d838161155b565b92915050565b600060208284031215610d9b57600080fd5b6000610da984828501610d20565b91505092915050565b60008060408385031215610dc557600080fd5b6000610dd385828601610d20565b9250506020610de485828601610d4a565b9150509250929050565b600060208284031215610e0057600080fd5b6000610e0e84828501610d35565b91505092915050565b600060208284031215610e2957600080fd5b6000610e3784828501610d4a565b91505092915050565b60008060408385031215610e5357600080fd5b6000610e6185828601610d4a565b9250506020610e7285828601610d20565b9150509250929050565b60008060408385031215610e8f57600080fd5b6000610e9d85828601610d4a565b9250506020610eae85828601610d5f565b9150509250929050565b600060208284031215610eca57600080fd5b6000610ed884828501610d74565b91505092915050565b60008060408385031215610ef457600080fd5b6000610f0285828601610d74565b9250506020610f1385828601610d4a565b9150509250929050565b6000610f29838361106a565b60c08301905092915050565b610f3e81611353565b82525050565b610f4d81611353565b82525050565b6000610f5e8261128f565b610f6881856112a7565b9350610f738361127f565b8060005b83811015610fa4578151610f8b8882610f1d565b9750610f968361129a565b925050600181019050610f77565b5085935050505092915050565b610fba81611371565b82525050565b610fc981611371565b82525050565b610fd8816113b8565b82525050565b6000610feb6026836112b8565b9150610ff682611428565b604082019050919050565b600061100e600f836112b8565b915061101982611477565b602082019050919050565b60006110316020836112b8565b915061103c826114a0565b602082019050919050565b60006110546016836112b8565b915061105f826114c9565b602082019050919050565b60c08201600082015161108060008501826110e5565b5060208201516110936020850182610f35565b5060408201516110a66040850182610fcf565b5060608201516110b96060850182610fb1565b5060808201516110cc60808501826110e5565b5060a08201516110df60a08501826110e5565b50505050565b6110ee816113ae565b82525050565b6110fd816113ae565b82525050565b60006020820190506111186000830184610f44565b92915050565b60006060820190506111336000830186610f44565b6111406020830185610f44565b61114d60408301846110f4565b949350505050565b600060408201905061116a6000830185610f44565b61117760208301846110f4565b9392505050565b600060208201905081810360008301526111988184610f53565b905092915050565b60006020820190506111b56000830184610fc0565b92915050565b60006040820190506111d06000830185610fc0565b6111dd6020830184610f44565b9392505050565b600060208201905081810360008301526111fd81610fde565b9050919050565b6000602082019050818103600083015261121d81611001565b9050919050565b6000602082019050818103600083015261123d81611024565b9050919050565b6000602082019050818103600083015261125d81611047565b9050919050565b600060208201905061127960008301846110f4565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006112d4826113ae565b91506112df836113ae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611314576113136113ca565b5b828201905092915050565b600061132a826113ae565b9150611335836113ae565b925082821015611348576113476113ca565b5b828203905092915050565b600061135e8261138e565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611389826114f2565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006113c38261137b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e206e6f742061646465640000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42616c616e6365206e6f742073756666696369656e7400000000000000000000600082015250565b60028110611503576115026113f9565b5b50565b61150f81611353565b811461151a57600080fd5b50565b61152681611365565b811461153157600080fd5b50565b61153d81611371565b811461154857600080fd5b50565b6002811061155857600080fd5b50565b611564816113ae565b811461156f57600080fd5b5056fea2646970667358221220f9fea9cb4b7b1bed7422d4d049ad39a869fc24fb6a91cc3df90c580fede3c0a364736f6c63430008040033";

type DexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dex__factory extends ContractFactory {
  constructor(...args: DexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Dex> {
    return super.deploy(overrides || {}) as Promise<Dex>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Dex {
    return super.attach(address) as Dex;
  }
  connect(signer: Signer): Dex__factory {
    return super.connect(signer) as Dex__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexInterface {
    return new utils.Interface(_abi) as DexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Dex {
    return new Contract(address, _abi, signerOrProvider) as Dex;
  }
}
